{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documention for <code>mibipret</code> python package","text":"<p>A Python package for prediction and analysis in Microbiome based Remediation. Developed as part of the MiBiRem toolbox for Bioremediation.</p>"},{"location":"#installation","title":"Installation","text":"<p>To install mibipret from GitHub repository, do:</p> <pre><code>git clone git@github.com:MiBiPreT/mibipret.git\ncd mibipret\npython -m pip mibipret .\n</code></pre>"},{"location":"getting-started/development/","title":"<code>mibipret</code> developer documentation","text":""},{"location":"getting-started/development/#development-install","title":"Development install","text":"<pre><code># Create a virtual environment, e.g. with\npython -m venv env\n\n# activate virtual environment\nsource env/bin/activate\n\n# make sure to have a recent version of pip and setuptools\npython -m pip install --upgrade pip setuptools\n\n# (from the project root directory)\n# install mibipret as an editable package\npython -m pip install --no-cache-dir --editable .\n# install development dependencies\npython -m pip install --no-cache-dir --editable .[dev]\n</code></pre> <p>Afterwards check that the install directory is present in the <code>PATH</code> environment variable.</p>"},{"location":"getting-started/development/#running-the-tests","title":"Running the tests","text":"<p>There are two ways to run tests.</p> <p>The first way requires an activated virtual environment with the development tools installed:</p> <pre><code>pytest -v\n</code></pre> <p>The second is to use <code>tox</code>, which can be installed separately (e.g. with <code>pip install tox</code>), i.e. not necessarily inside the virtual environment you use for installing <code>mibipret</code>, but then builds the necessary virtual environments itself by simply running:</p> <pre><code>tox\n</code></pre> <p>Testing with <code>tox</code> allows for keeping the testing environment separate from your development environment. The development environment will typically accumulate (old) packages during development that interfere with testing; this problem is avoided by testing with <code>tox</code>.</p>"},{"location":"getting-started/development/#test-coverage","title":"Test coverage","text":"<p>In addition to just running the tests to see if they pass, they can be used for coverage statistics, i.e. to determine how much of the package\u2019s code is actually executed during tests. In an activated virtual environment with the development tools installed, inside the package directory, run:</p> <pre><code>coverage run\n</code></pre> <p>This runs tests and stores the result in a <code>.coverage</code> file. To see the results on the command line, run</p> <pre><code>coverage report\n</code></pre> <p><code>coverage</code> can also generate output in HTML and other formats; see <code>coverage help</code> for more information.</p>"},{"location":"getting-started/development/#running-linters-locally","title":"Running linters locally","text":"<p>For linting and sorting imports we will use ruff. Running the linters requires an  activated virtual environment with the development tools installed.</p> <pre><code># linter\nruff check .\n\n# linter with automatic fixing\nruff check . --fix\n</code></pre> <p>To fix readability of your code style you can use yapf.</p> <p>You can enable automatic linting with <code>ruff</code> on commit by enabling the git hook from <code>.githooks/pre-commit</code>, like so:</p> <pre><code>git config --local core.hooksPath .githooks\n</code></pre>"},{"location":"getting-started/development/#testing-docs-locally","title":"Testing docs locally","text":"<p>To build the documentation locally, first make sure <code>mkdocs</code> and its dependencies are installed: <pre><code>python -m pip install .[doc]\n</code></pre></p> <p>Then you can build the documentation and serve it locally with <pre><code>mkdocs serve\n</code></pre></p> <p>This will return a URL (e.g. <code>http://127.0.0.1:8000/mibipret/</code>) where the docs site can be viewed.</p>"},{"location":"getting-started/development/#versioning","title":"Versioning","text":"<p>Bumping the version across all files is done with bump-my-version, e.g.</p> <pre><code>bump-my-version major  # bumps from e.g. 0.3.2 to 1.0.0\nbump-my-version minor  # bumps from e.g. 0.3.2 to 0.4.0\nbump-my-version patch  # bumps from e.g. 0.3.2 to 0.3.3\n</code></pre>"},{"location":"getting-started/development/#making-a-release","title":"Making a release","text":"<p>This section describes how to make a release in 3 parts:</p> <ol> <li>preparation</li> <li>making a release on PyPI</li> <li>making a release on GitHub</li> </ol>"},{"location":"getting-started/development/#13-preparation","title":"(1/3) Preparation","text":"<ol> <li>Verify that the information in CITATION.cff is correct.</li> <li>Make sure the version has been updated.</li> <li>Run the unit tests with <code>pytest -v</code></li> </ol>"},{"location":"getting-started/development/#23-pypi","title":"(2/3) PyPI","text":"<p>In a new terminal:</p> <pre><code># OPTIONAL: prepare a new directory with fresh git clone to ensure the release\n# has the state of origin/main branch\ncd $(mktemp -d mibipret.XXXXXX)\ngit clone git@github.com:MiBiPreT/mibipret .\n\n# make sure to have a recent version of pip and the publishing dependencies\npython -m pip install --upgrade pip\npython -m pip install .[publishing]\n\n# create the source distribution and the wheel\npython -m build\n\n# upload to test pypi instance (requires credentials)\npython -m twine upload --repository testpypi dist/*\n</code></pre> <p>Visit https://test.pypi.org/</p> <p>and verify that your package was uploaded successfully. Keep the terminal open, we\u2019ll need it later.</p> <p>In a new terminal, without an activated virtual environment or an env directory:</p> <pre><code>cd $(mktemp -d mibipret-test.XXXXXX)\n\n# prepare a clean virtual environment and activate it\npython -m venv env\nsource env/bin/activate\n\n# make sure to have a recent version of pip and setuptools\npython -m pip install --upgrade pip\n\n# install from test pypi instance:\npython -m pip -v install --no-cache-dir \\\n--index-url https://test.pypi.org/simple/ \\\n--extra-index-url https://pypi.org/simple mibipret\n</code></pre> <p>Check that the package works as it should when installed from pypitest.</p> <p>Then upload to pypi.org with:</p> <pre><code># Back to the first terminal,\n# FINAL STEP: upload to PyPI (requires credentials)\npython -m twine upload dist/*\n</code></pre>"},{"location":"getting-started/development/#33-github","title":"(3/3) GitHub","text":"<p>Don\u2019t forget to also make a release on GitHub. If your repository uses the GitHub-Zenodo integration this will also trigger Zenodo into making a snapshot of your repository and sticking a DOI on it.</p>"},{"location":"reference/reference/","title":"<code>mibipret</code> API reference","text":"<p>Documentation about mibipret.</p>"},{"location":"reference/reference/#mibipret.data","title":"<code>data</code>","text":"<p>mibipret module for data handling.</p>"},{"location":"reference/reference/#mibipret.data.data","title":"<code>data</code>","text":"<p>Functions for data I/O handling.</p> <p>@author: Alraune Zech</p>"},{"location":"reference/reference/#mibipret.data.data.check_columns","title":"<code>check_columns(data, verbose=True)</code>","text":"<p>Function that looks at the column names and renames the columns to     the standard names of the model</p> <pre><code>data (df): dataframe with the measurements\n</code></pre> <pre><code>pandas.DataFrame: Tabular data with standard column names\n</code></pre>"},{"location":"reference/reference/#mibipret.data.data.check_columns--raises","title":"Raises:","text":""},{"location":"reference/reference/#mibipret.data.data.check_columns--example","title":"Example:","text":"<p>Todo\u2019s:     - complete list of potential contaminants, environmental factors     - add name check for metabolites?     - return column names that have not been identified     - option to return only columns identified     - add key-word to specify which data to extract         (i.e. data columns to return)</p> Source code in <code>mibipret/data/data.py</code> <pre><code>def check_columns(data, verbose = True):\n    \"\"\"Function that looks at the column names and renames the columns to\n        the standard names of the model\n\n    Args:\n    -------\n        data (df): dataframe with the measurements  \n\n    Returns:\n    -------\n        pandas.DataFrame: Tabular data with standard column names\n\n    Raises:\n    -------\n\n    Example:\n    -------\n    Todo's:\n        - complete list of potential contaminants, environmental factors\n        - add name check for metabolites?\n        - return column names that have not been identified\n        - option to return only columns identified\n        - add key-word to specify which data to extract\n            (i.e. data columns to return)\n\n    \"\"\"\n    data.columns = [col_dict.get(x, x) for x in data.columns]\n    # Todo: modify to first only report renaming of column names \n    data = data.fillna(0)\n\n    if verbose:\n        print(\"Data with modified column names:\\n\", data)    \n\n    return data\n</code></pre>"},{"location":"reference/reference/#mibipret.data.data.check_units","title":"<code>check_units(data)</code>","text":"<p>Function to check the units of the measurements</p> <pre><code>data (df): dataframe with the measurements\n</code></pre> <pre><code>None\n</code></pre>"},{"location":"reference/reference/#mibipret.data.data.check_units--raises","title":"Raises:","text":""},{"location":"reference/reference/#mibipret.data.data.check_units--example","title":"Example:","text":"Source code in <code>mibipret/data/data.py</code> <pre><code>def check_units(data):\n    \"\"\"Function to check the units of the measurements\n\n    Args:\n    -------\n        data (df): dataframe with the measurements\n\n\n    Returns:\n    -------\n        None\n\n\n    Raises:\n    -------\n\n    Example:\n    -------\n    \"\"\"\n    mgperl = [\"mg/L\", \"mg/l\", \"MG/L\"]\n    microgperl = [\n        \"ug/l\",\n        \"ug/L\",\n        \"micro g/l\",\n        \"micro g/L\",\n        \"MICRO G/L\",\n        r\"$\\mu$ g/l\",\n        r\"$\\mu$ g/L\",\n    ]\n\n    cols = data.columns\n    col_check_list= []\n\n    for quantity in electron_acceptors:\n        if quantity in cols:\n            if data[quantity][0] not in mgperl:\n                print(\"Warning: Check unit of {}!\\n Given in {}, \\\n                      but must be mg/L.\".format(quantity,data[quantity][0]))\n                # raise ValueError(\"Check unit of {} - \n                # it must be mg/L.\".format(quantity))\n                col_check_list.append(quantity)\n\n    for quantity in contaminants:\n        if quantity in cols:\n            if data[quantity][0] not in microgperl:\n                print(\"Warning: Check unit of {}!\\n Given in {}, but must \\\n                      be microgramm/L.\".format(quantity,data[quantity][0]))\n                # raise ValueError(r\"Check unit of {} - it must be $\\mu$g/L.\".format(quantity))\n                col_check_list.append(quantity)\n\n    if \"redoxpot\" in data.columns:\n        if data[\"redoxpot\"][0] != \"mV\":\n            print(\"Warning: Check unit of {}!\\n Given in {}, but must be \\\n                  mV.\".format(\"redoxpot\",data[quantity][0]))\n            col_check_list.append(\"redoxpot\")\n\n    if len(col_check_list) == 0:\n        print(\"All quantities given in proper units\")\n\n    return col_check_list\n</code></pre>"},{"location":"reference/reference/#mibipret.data.data.check_values","title":"<code>check_values(data, replace=0)</code>","text":"<p>Function that checks on value types and replaces non-measured values.</p> <pre><code>data (df): dataframe with the measurements\nreplace (float,nan): value to replace missing entries with (default 0)\n</code></pre> <pre><code>pandas.DataFrame: Tabular data with standard column names\n</code></pre>"},{"location":"reference/reference/#mibipret.data.data.check_values--raises","title":"Raises:","text":""},{"location":"reference/reference/#mibipret.data.data.check_values--example","title":"Example:","text":"Source code in <code>mibipret/data/data.py</code> <pre><code>def check_values(\n        data,\n        replace = 0,\n        ):\n    \"\"\"Function that checks on value types and replaces non-measured values.\n\n    Args:\n    -------\n        data (df): dataframe with the measurements\n        replace (float,nan): value to replace missing entries with (default 0)\n\n    Returns:\n    -------\n        pandas.DataFrame: Tabular data with standard column names\n\n\n    Raises:\n    -------\n\n    Example:\n    -------\n\n    \"\"\"\n    if \"redoxpot\" in data.columns:\n        data[\"redoxpot\"].iloc[1:] = data[\"redoxpot\"].iloc[1:].astype(float)\n    data.iloc[:,1:] = data.iloc[:,1:].apply(\n        lambda i: i.apply(\n            lambda x: float(x)\n            if str(x).replace(\".\", \"\", 1).isnumeric()\n            else x\n        )\n    )\n    data.iloc[:,1:] = data.iloc[:,1:].replace(to_replace=\"-\", value=replace)\n\n    return data\n</code></pre>"},{"location":"reference/reference/#mibipret.data.data.example_data","title":"<code>example_data(data_type='all')</code>","text":"<p>Function provinging test data for mibipret data analysis</p> <pre><code>data_type (str) - type of data to return:\n                    -- \"all\": all types of data available\n                    -- \"setting\": well setting data only\n                    -- \"contaminants\": data on contaminants\n                    -- \"environment\": data on environmental\n                    -- \"metabolites\": data on metabolites\n                    -- \"hydro\": data on hydrogeolocial conditions\n</code></pre> <pre><code>pandas.DataFrame: Tabular data with standard column names\n</code></pre>"},{"location":"reference/reference/#mibipret.data.data.example_data--raises","title":"Raises:","text":""},{"location":"reference/reference/#mibipret.data.data.example_data--example","title":"Example:","text":"Source code in <code>mibipret/data/data.py</code> <pre><code>def example_data(\n        data_type = 'all'):\n    \"\"\"Function provinging test data for mibipret data analysis\n\n    Args:\n    -------\n        data_type (str) - type of data to return:\n                            -- \"all\": all types of data available\n                            -- \"setting\": well setting data only\n                            -- \"contaminants\": data on contaminants\n                            -- \"environment\": data on environmental\n                            -- \"metabolites\": data on metabolites\n                            -- \"hydro\": data on hydrogeolocial conditions\n\n    Returns:\n    -------\n        pandas.DataFrame: Tabular data with standard column names    \n\n    Raises:\n    -------\n\n    Example:\n    -------\n\n    \"\"\"\n    setting = [\"sample_nr\",\"obs_well\",\"depth\"]\n    setting_units = [' ',' ','m']\n    setting_s01 = ['2000-001', 'B-MLS1-3-12', -12]\n    setting_s02 = ['2000-002', 'B-MLS1-5-15', -15.5]\n    setting_s03 = ['2000-003', 'B-MLS1-6-17', -17]\n    setting_s04 = ['2000-004', 'B-MLS1-7-19', -19]\n\n    environment = ['pH', 'redox', 'sulfate', 'ammonium', 'sulfide', \n                   'methane', 'ironII', 'manganese']\n    environment_units = [' ','mV', 'mg/L', 'mg/L', 'mg/L', \n                         'mg/L', 'mg/L', 'mg/L']\n    environment_s01 = [7.23, -208, 23, 5, 0, 748, 3, 1]\n    environment_s02 = [7.67, -231, 0, 6, 0, 2022, 1, 0]\n    environment_s03 = [7.75, -252, 1, 13, 0, 200, 1, 0]\n    environment_s04 = [7.53, -317, 9, 15, 6, 122, 0, 0]\n\n    contaminants = ['benzene', 'toluene', 'ethylbenzene', 'pm_xylene', \n                    'o_xylene', 'indane', 'indene', 'naphthalene']\n    contaminants_units = ['ug/L', 'ug/L', 'ug/L', 'ug/L', \n                          'ug/L', 'ug/L', 'ug/L', 'ug/L']\n    contaminants_s01 = [263, 2, 269, 14, 51, 1254, 41, 2207]\n    contaminants_s02 = [179, 7, 1690, 751, 253, 1352, 15, 5410]\n    contaminants_s03 = [853, 17, 1286, 528, 214, 1031, 31, 3879]\n    contaminants_s04 = [1254, 10, 1202, 79, 61, 814, 59, 1970]\n\n    if  data_type == 'all':\n        units = setting_units+environment_units+contaminants_units\n        columns = setting+environment+contaminants\n        sample_01 = setting_s01+environment_s01+contaminants_s01\n        sample_02 = setting_s02+environment_s02+contaminants_s02\n        sample_03 = setting_s03+environment_s03+contaminants_s03\n        sample_04 = setting_s04+environment_s04+contaminants_s04\n\n        data = pd.DataFrame([units,sample_01,sample_02,sample_03,sample_04],\n                            columns = columns)\n\n    elif  data_type == 'setting':\n        data = pd.DataFrame([setting_units,setting_s01,setting_s02,setting_s03,\n                             setting_s04],columns = setting)\n\n    elif  data_type == 'environment':\n        units = setting_units+environment_units\n        columns = setting+environment\n        sample_01 = setting_s01+environment_s01\n        sample_02 = setting_s02+environment_s02\n        sample_03 = setting_s03+environment_s03\n        sample_04 = setting_s04+environment_s04\n\n        data = pd.DataFrame([units,sample_01,sample_02,sample_03,sample_04],\n                            columns = columns)\n\n    elif  data_type == 'contaminants':\n        units = setting_units+contaminants_units\n        columns = setting+contaminants\n        sample_01 = setting_s01+contaminants_s01\n        sample_02 = setting_s02+contaminants_s02\n        sample_03 = setting_s03+contaminants_s03\n        sample_04 = setting_s04+contaminants_s04\n\n        data = pd.DataFrame([units,sample_01,sample_02,sample_03,sample_04],\n                            columns = columns)\n\n    # columns = ['sample nr','well','depth',\t'pH', 'redox', 'sulfate', 'ammonium', 'sulfide', 'methane', 'iron II', 'manganese', 'benzene', 'toluene', 'ethylbenzene', 'pm_xylene', 'o_xylene', 'indane', 'indene', 'naphthalene']\n    # units = [' ',' ','m',' ','mV', 'mg/L', 'mg/L', 'mg/L', 'mg/L', 'mg/L', 'mg/L', 'ug/L', 'ug/L', 'ug/L', 'ug/L', 'ug/L', 'ug/L', 'ug/L', 'ug/L']\n    # sample_01 = ['2000-001', 'B-MLS1-3-12', -12, 7.23, -208, 23, 5, 0, 748, 3, 1, 263, 2, 269, 14, 51, 1254, 41, 2207]\n    # sample_02 = ['2000-002', 'B-MLS1-5-15', -15.5, 7.67, -231, 0, 6, 0, 2022, 1, 0, 179, 7, 1690, 751, 253, 1352, 15, 5410]\n    # sample_03 = ['2000-003', 'B-MLS1-6-17', -17, 7.75, -252, 1, 13, 0, 200, 1, 0, 853, 17, 1286, 528, 214, 1031, 31, 3879]\n    # sample_04 = ['2000-004', 'B-MLS1-7-19', -19, 7.53, -317, 9, 15, 6, 122, 0, 0, 1254, 10, 1202, 79, 61, 814, 59, 1970]\n    # data = pd.DataFrame([units,sample_01,sample_02,sample_03,sample_04],columns = columns)\n\n    return data    \n</code></pre>"},{"location":"reference/reference/#mibipret.data.data.load_csv","title":"<code>load_csv(file_path=None, verbose=False, store_provenance=False)</code>","text":"<p>Function to load data from csv file.</p> <pre><code>file_path (str): Name of the path to the file\nverbose (bool): flag \nstore_provenance (bool): ...\n</code></pre> <pre><code>pandas.DataFrame: Tabular data\n</code></pre> <pre><code>ValueError: If `file_path` is not a valid file location\n</code></pre>"},{"location":"reference/reference/#mibipret.data.data.load_csv--example","title":"Example:","text":"<p>This function can be called with the file path of the example data as     argument using:</p> <pre><code>&gt;&gt;&gt; from mibipret.data import load_excel\n&gt;&gt;&gt; load_excel(example_data.csv)\n</code></pre> Source code in <code>mibipret/data/data.py</code> <pre><code>def load_csv(        \n        file_path = None,\n        verbose = False,\n        store_provenance = False,\n        ):\n    \"\"\"Function to load data from csv file.\n\n    Args:\n    -------\n        file_path (str): Name of the path to the file\n        verbose (bool): flag \n        store_provenance (bool): ...\n\n    Returns:\n    -------\n        pandas.DataFrame: Tabular data\n\n    Raises:\n    -------\n        ValueError: If `file_path` is not a valid file location\n\n    Example:\n    -------\n       This function can be called with the file path of the example data as \n       argument using:\n\n        &gt;&gt;&gt; from mibipret.data import load_excel\n        &gt;&gt;&gt; load_excel(example_data.csv)\n\n    \"\"\"\n    if file_path is None:\n        raise ValueError('Specify file path and file name!')\n    if not os.path.isfile(file_path):\n        raise ValueError('Specified file does not exist!')\n\n    data = pd.read_csv(file_path, encoding=\"unicode_escape\")\n    if \";\" in data.iloc[1][0]:\n        data = pd.read_csv(file_path, sep=\";\", encoding=\"unicode_escape\")\n    units = data.iloc[0]\n\n    if verbose:\n        print(\"Unit of quantities: \\n\", units)\n        print(\"Loaded data:\\n\", data)\n    return data, units\n</code></pre>"},{"location":"reference/reference/#mibipret.data.data.load_excel","title":"<code>load_excel(file_path=None, sheet_name='Sheet1', verbose=False, store_provenance=False, **kwargs)</code>","text":"<p>Function to load data from excel file.</p> <pre><code>file_path (str): Name of the path to the file\nsheet_name (int): Number of the sheet in the excel file to load\nverbose (bool): flag \nstore_provenance (bool): ...\n**kwargs - optional keyword arguments to pass to pandas' routine \n    read_excel()\n</code></pre> <pre><code>pandas.DataFrame: Tabular data\n</code></pre> <pre><code>ValueError: If `file_path` is not a valid file location\n</code></pre>"},{"location":"reference/reference/#mibipret.data.data.load_excel--example","title":"Example:","text":"<p>This function can be called with the file path of the example data as     argument using:</p> <pre><code>&gt;&gt;&gt; from mibipret.data import load_excel\n&gt;&gt;&gt; load_excel(example_data.xlsx)\n</code></pre> Source code in <code>mibipret/data/data.py</code> <pre><code>def load_excel(\n        file_path = None,\n        sheet_name = 'Sheet1',\n        verbose = False,\n        store_provenance = False,\n        **kwargs,\n        ):\n    \"\"\"Function to load data from excel file.\n\n    Args:\n    -------\n        file_path (str): Name of the path to the file\n        sheet_name (int): Number of the sheet in the excel file to load\n        verbose (bool): flag \n        store_provenance (bool): ...\n        **kwargs - optional keyword arguments to pass to pandas' routine \n            read_excel()\n\n    Returns:\n    -------\n        pandas.DataFrame: Tabular data\n\n    Raises:\n    -------\n        ValueError: If `file_path` is not a valid file location\n\n    Example:\n    -------\n       This function can be called with the file path of the example data as \n       argument using:\n\n        &gt;&gt;&gt; from mibipret.data import load_excel\n        &gt;&gt;&gt; load_excel(example_data.xlsx)\n\n    \"\"\"\n    if file_path is None:\n        raise ValueError('Specify file path and file name!')\n    if not os.path.isfile(file_path):\n        raise ValueError('Specified file does not exist: ',file_path)\n\n    data = pd.read_excel(file_path, \n                         sheet_name = sheet_name,\n                         **kwargs)\n    if \";\" in data.iloc[1][0]:\n        data = pd.read_excel(file_path, \n                             sep=\";\", \n                             sheet_name = sheet_name,\n                             **kwargs)\n    units = data.iloc[0]\n\n    return data, units\n</code></pre>"},{"location":"reference/reference/#mibipret.data.names","title":"<code>names</code>","text":"<p>Name specifications of data!</p> <p>File containing name specifications of quantities and parameters measured in groundwater samples useful for biodegredation and bioremediation analysis</p> <p>@author: A. Zech</p>"},{"location":"reference/reference/#mibipret.my_module","title":"<code>my_module</code>","text":"<p>Documentation about the mibipret module.</p>"},{"location":"reference/reference/#mibipret.my_module.hello","title":"<code>hello(name)</code>","text":"<p>Say hello.</p> <p>Function docstring using Google docstring style.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name to say hello to</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>Hello message</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>name</code> is equal to <code>nobody</code></p> Example <p>This function can be called with <code>Jane Smith</code> as argument using</p> <p>from mibipret.my_module import hello hello(\u2018Jane Smith\u2019) \u2018Hello Jane Smith!\u2019</p> Source code in <code>mibipret/my_module.py</code> <pre><code>def hello(name):\n    \"\"\"Say hello.\n\n    Function docstring using Google docstring style.\n\n    Args:\n        name (str): Name to say hello to\n\n    Returns:\n        str: Hello message\n\n    Raises:\n        ValueError: If `name` is equal to `nobody`\n\n    Example:\n        This function can be called with `Jane Smith` as argument using\n\n        &gt;&gt;&gt; from mibipret.my_module import hello\n        &gt;&gt;&gt; hello('Jane Smith')\n        'Hello Jane Smith!'\n\n    \"\"\"\n    if name == 'nobody':\n        raise ValueError('Can not say hello to nobody')\n    return f'Hello {name}!'\n</code></pre>"}]}